{"version":3,"sources":["components/card-item/card-item.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CardItem","props","react_default","a","createElement","className","src","concat","monster","id","alt","name","email","CardList","monsters","map","card_item_component","key","SearchBox","type","placeholder","value","onChange","onTextChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchValue","_this2","fetch","then","res","json","setState","_this$state","trim","filter","toLowerCase","indexOf","_this3","search_box_component","e","currentTarget","card_list_component","filteredMonsters","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAiBeA,qBAbE,SAAAC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,0BACHC,IAAI,YAENR,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQG,MACnBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMO,QAAQI,UCETC,EAVE,SAAAZ,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZJ,EAAMa,SAASC,IAAI,SAAAP,GAAO,OACzBN,EAAAC,EAAAC,cAACY,EAAD,CAAUC,IAAKT,EAAQC,GAAID,QAASA,QCS7BU,SAdG,SAACjB,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACfH,EAAAC,EAAAC,cAAA,SACEe,KAAK,SACLC,YAAcnB,EAAMmB,YACpBf,UAAU,eACVgB,MAAOpB,EAAMoB,MACbC,SAAUrB,EAAMsB,kBC+CPC,cApDb,SAAAA,EAAYvB,GAAO,IAAAwB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM3B,KAED+B,MAAQ,CACXlB,SAAU,GACVmB,YAAa,IALER,mFASC,IAAAS,EAAAN,KAClBO,MAAM,8CACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAtB,GAAQ,OACZoB,EAAKK,SAAS,CACZzB,0DAKW,IAAA0B,EACiBZ,KAAKI,MAA/BlB,EADS0B,EACT1B,SAAUmB,EADDO,EACCP,YAElB,OAAKA,GAAgBA,EAAYQ,OAE1B3B,EAAS4B,OACd,SAAAlC,GAAO,OAEJ,IADDA,EAAQG,KAAKgC,cAAcC,QAAQX,EAAYQ,OAAOE,iBAJV7B,mCASzC,IAAA+B,EAAAjB,KACP,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,8BAEAF,EAAAC,EAAAC,cAAC0C,EAAD,CACEzB,MAAOO,KAAKI,MAAMC,YAClBb,YAAY,kBACZG,aAAc,SAAAwB,GAAC,OACbF,EAAKN,SAAS,CACZN,YAAac,EAAEC,cAAc3B,WAKnCnB,EAAAC,EAAAC,cAAC6C,EAAD,CAAUnC,SAAUc,KAAKsB,6BA/CfC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.4abbefed.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./card-item.style.css\";\r\n\r\nconst CardItem = props => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=240x240`}\r\n        alt=\"Monster\"\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p>{props.monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardItem;\r\n","import React from \"react\";\r\nimport \"./card-list.style.css\";\r\nimport CardItem from \"../card-item/card-item.component\";\r\n\r\nconst CardList = props => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map(monster => (\r\n        <CardItem key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport './search-box.style.css';\r\n\r\nconst SearchBox = (props) => {\r\n  return (\r\n    <div className=\"search-input--container\">\r\n    <input\r\n      type=\"search\"\r\n      placeholder= {props.placeholder}\r\n      className=\"search-input\"\r\n      value={props.value}\r\n      onChange={props.onTextChange}\r\n    />\r\n  </div>\r\n  )\r\n};\r\n\r\nexport default SearchBox;","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      monsters: [],\n      searchValue: \"\"\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(monsters =>\n        this.setState({\n          monsters\n        })\n      );\n  }\n\n  filteredMonsters() {\n    const { monsters, searchValue } = this.state;\n\n    if (!searchValue || !searchValue.trim()) return monsters;\n\n    return monsters.filter(\n      monster =>\n        monster.name.toLowerCase().indexOf(searchValue.trim().toLowerCase()) !==\n        -1\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <h1>Monsters Rolodex</h1>\n\n        <SearchBox\n          value={this.state.searchValue}\n          placeholder=\"Search Monsters\"\n          onTextChange={e =>\n            this.setState({\n              searchValue: e.currentTarget.value\n            })\n          }\n        />\n\n        <CardList monsters={this.filteredMonsters()} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}